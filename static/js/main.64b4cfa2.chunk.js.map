{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","Input","props","state","className","type","placeholder","onChange","e","setQuery","target","value","query","onKeyPress","search","Display","weather","city","country","temp","w","h","Date","getHours","icon","App","result","theme","bind","setTheme","setWeather","this","setState","sys","name","main","Math","round","evt","key","fetch","then","res","json","display","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.64b4cfa2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst api = {\n\tkey :\"8644a92a0c0c4120b86d1f7b956731d5\",\n\tbase : \"https://api.openweathermap.org/data/2.5/\"\n}\n\nconst dateBuilder = (d)=>{\n\tlet months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n\tlet days = ['Sun','Mon','Tues','Wednes','Thurs','Fri','Satur'];\n\n\tlet day  = days[d.getDay()];\n\tlet date = d.getDate();\n\tlet month = months[d.getMonth()];\n\tlet year = d.getFullYear();\n\t\n\treturn `${day}day ${date} ${month} ${year}`;\n}\n\nconst icon = (w)=>{\n\tif(w===\"Clouds\"){\n\t\treturn \"☁️\";\n\t}\n\tif(w===\"Haze\"){\n\t\treturn \"🌫️\";\n\t}\n\tif(w===\"Rain\"){\n\t\treturn \"🌧️\";\n\t}\n\tif(w===\"Sunny\"){\n\t\treturn \"☀️\";\n\t}\n\tif(w===\"Thunderstorm\"){\n\t\treturn \"⛈️\";\n\t}\n\tif(w===\"Snow\"){\n\t\treturn \"🌨\";\n\t}\n\tif(w==\"Clear\"){\n\t\tlet h = new Date();\n\t\th = h.getHours();\n\t\tif(h>=6 && h<=18)\n\t\t\treturn \"🏞\";\n\t\telse\n\t\t\treturn\"🌌\";\n\t}\n}\n\nfunction Input(props,state){\n\tlet query;\n\treturn(\n\t\t<div className=\"serch-box\">\n\t\t\t<div className=\"input\">\n                \t<input\n                        \ttype=\"text\"\n                       \t\tclassName=\"search-bar\"\n                       \t\tplaceholder=\"Search...\"\n                        \tonChange={e=>props.setQuery(e.target.value)}\n\t\t\t\tvalue={query}\n                        \tonKeyPress={e=>props.search(e)}\n                 \t/>\n\t\t\t</div>\n\t         </div>\n\t);\n}\n\nfunction Display(props){\n\treturn(\n\t\t<div>\n\t\t\t<div className=\"location-box\">\n                \t<div className=\"location\">{props.weather.city},{props.weather.country}</div>\n                \t<div className=\"date\">{props.weather.date}</div>\n          \t\t</div>\n\n          \t\t<div className=\"weather-box\">\n                \t<div className=\"temp\">{props.weather.temp}°C</div>\n                \t<div className=\"weather\">{props.weather.weather}</div>\n                \t<div className=\"icon\">{icon(props.weather.weather)}</div>\n          \t\t</div>\n\t\t</div>\n\n\t);\n}\n\nclass App extends React.Component{\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tresult : 0,\t//0:noSearch,1:correctResult,2:invalidSerach\n\t\t\tweather : {},\n\t\t\ttheme : 'app',\n\t\t\tquery : '',\n\t\t}\n\t\tthis.setQuery = this.setQuery.bind(this);\n\t\tthis.setTheme = this.setTheme.bind(this);\n\t\tthis.setWeather = this.setWeather.bind(this);\n\t\tthis.search = this.search.bind(this);\n\t}\n\n\tsetQuery(query){\n\t\tthis.setState({\n\t\t\tquery : query,\n\t\t})\n\t}\n\n\tsetTheme(weather){\n\t\tlet theme =\"app\";\n\t\tif(weather.temp>21)\n\t\t\ttheme = \"app warm\"\n\t\tif(weather.weather===\"Clouds\")\n\t\t\ttheme = \"app gray\"\n\t\tif(weather.weather===\"Snow\")\n\t\t\ttheme = \"app white\"\n\t\tif(weather.weather===\"Rain\")\n\t\t\ttheme = \"app\"\n\t\tif(weather.weather===\"Thunderstorm\" || weather.weather===\"Haze\")\n\t\t\ttheme = \"app darkgray\"\n\t\tthis.setState({\n\t\t\ttheme : theme,\n\t\t})\n\t}\n\n\tsetWeather(result){\n\t\tlet weather;\n\t\tif(result.sys){\n\t\t\tweather={\n\t\t\t\tcity: result.name,\n\t\t\t\tcountry : result.sys.country,\n\t\t\t\tdate : dateBuilder(new Date()),\n\t\t\t\tweather : result.weather[0].main,\n\t\t\t\ttemp : Math.round(result.main.temp),\n\t\t\t}\n\n\t\tthis.setState({\n\t\t\tresult : 1,\n\t\t\tweather : weather,\n\t\t})\n\n\t\tthis.setTheme(weather);\n\t\t}\n\t\telse {\n\t\t\tthis.setState({\n\t\t\t\tresult : 2\n\t\t\t})\n\t\t}\n\t\t\n\t}\n\n\tsearch(evt){\n\t\tif(evt.key===\"Enter\"){\n                \tfetch(`${api.base}weather?q=${this.state.query}&units=metric&APPID=${api.key}`)\n                        \t.then(res=>res.json())\n                       \t\t.then(result=>{\n                                \tthis.setWeather(result);\n                                \tthis.setQuery('');\n                                //\tconsole.log(weather);\n                        \t}\n                        );\n\n        \t}\n\t}\n\n\trender(){\n\t\tlet display;\n\n\t\tif(this.state.result===0){\n\t\t\tdisplay = <div className=\"initial\">Search City for getting weather</div>\n\t\t}\n\t\telse if(this.state.result===1){\n\t\t\tdisplay = <Display weather={this.state.weather}/>\n\t\t}\n\t\telse{\n\t\t\tdisplay = <div className=\"warning\">City not found</div>\n\t\t}\n\t\n\t\treturn(\t\n   \t\t\t<div className={this.state.theme}>\n\t\t\t\t<main>\n\t  \t\t\t\t<Input search={this.search} setQuery={this.setQuery} />\n\t  \t\t\t\t{display}\n\t\t\t\t</main>\t\t\n    \t\t\t</div>\n  \t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif(module.hot){\n  module.hot.accept();\n}\n"],"sourceRoot":""}